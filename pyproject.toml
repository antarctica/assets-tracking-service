[project]
name = "assets-tracking-service"
version = "0.7.1"
description = "Service to track the location of BAS assets, including ships, aircraft, and vehicles."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Felix Fennell", email = "felnne@bas.ac.uk" }
]
requires-python = ">=3.11"
dependencies = [
    "arcgis>=2.4.1",
    "assets-tracking-service-aircraft-provider>=0.3.2",
    "dsnparse>=0.3.1",
    "environs>=14.3.0",
    "geojson>=3.2.0",
    "importlib-resources>=6.5.2",
    "jinja2>=3.1.6",
    "lantern>=0.3.0",
    "mygeotab>=0.9.3",
    "pint>=0.25.0",
    "psycopg[binary]>=3.2.10",
    "rich>=14.1.0",
    "sentry-sdk>=2.38.0",
    "shapely>=2.1.1",
    "typer>=0.19.1",
    "ulid-py>=1.1.0",
]

[project.scripts]
ats-ctl = "assets_tracking_service.cli:app_cli"

[dependency-groups]
dev = [
    "dunamai>=1.25.0",
    "pymarkdownlnt>=0.9.32",
    "ruff>=0.13.1",
    "safety>=3.6.1",
    "sqlfluff>=3.4.2",
    "taskipy>=1.14.1",
    "ty>=0.0.1a21",
]
test = [
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-env>=1.1.5",
    "pytest-freezer>=0.4.9",
    "pytest-mock>=3.15.1",
    "pytest-postgresql>=7.0.2",
    "pytest-random-order>=1.2.0",
    "pytest-recording>=0.13.2",
]

[[tool.uv.index]]
name = "self"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1220/packages/pypi/simple"
publish-url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1220/packages/pypi"
explicit = true

[[tool.uv.index]]
name = "ats-air"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1291/packages/pypi/simple"
explicit = true

[[tool.uv.index]]
name = "lantern"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1355/packages/pypi/simple"
explicit = true

[tool.uv.sources]
assets-tracking-service-aircraft-provider = { index = "ats-air" }
lantern = { index = "lantern" }

[tool.taskipy.variables]
docs_targets = "docs/"
types_targets = "src/"
sql_targets = "src/assets_tracking_service/resources/db_migrations/"
targets = "src/ tasks/ tests/"
cov_options = "--cov --cov-report=html"

[tool.taskipy.tasks]
# generic dev
build = { cmd = "uv build", help = "Build app package" }
format = { cmd = "ruff format {targets}", help = "Lint app", use_vars = true }
lint = { cmd = "ruff check {targets}", help = "Lint app", use_vars = true }
types = { cmd = "ty check {types_targets}", help = "Type check app", use_vars = true }
markdown = { cmd = "pymarkdown scan --recurse {docs_targets}", help = "Lint docs", use_vars = true }
sql = { cmd = "sqlfluff lint {sql_targets}", help = "Lint migrations", use_vars = true }
pre-commit = { cmd = "pre-commit run --all-files", help = "Run pre-commit hooks on all files" }
test = { cmd = "pytest", help = "Run tests" }
test-cov = { cmd = "pytest {cov_options}", help = "Run tests with coverage", use_vars = true }
test-reset = { cmd = "pytest --cache-clear", help = "Reset pytest cache and run tests" }
safety = { cmd = "safety scan --detailed-output", help = "Check for insecure dependencies" }
# CI
ci-test = { cmd = "pytest {cov_options} -o junit_family=xunit2 --junitxml=test-results.xml --continue-on-collection-errors", help = "Called by CI", use_vars = true }
ci-safety = { cmd = "safety --stage cicd scan --detailed-output", help = "Called by CI" }
# app dev
release = { cmd = "python -m tasks.release", help = "Prepapre app release" }
reset-db = { cmd = "python -m tasks.reset_db", help = "Reset local dev database" }
version = { cmd = "python -m tasks.version", help = "Show package version" }
migration = { cmd = "python -m tasks.migration", help = "Create new database migration" }
config-init = { cmd = "op inject --in-file resources/env/.env.tpl --out-file .env", help = "Initialise config file" }
pgsync-init = { cmd = "op inject --in-file resources/pgsync/.pgsync.yml.tpl --out-file .pgsync.yml", help = "Initialise pgsync config" }

[tool.ruff]
src = ["src"]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
#   A | builtins (variables named after builtin names)
# ANN | annotations (type hints)
#   B | bug-bear (bad code)
#  B9 | bug-bear opinionated (additional bad code)
# C90 | mccabe (code complexity)
#  C4 | comprehensions (list/dict/set comprehensions)
#   D | pydocstyle (docstring)
# DTZ | datetimez (date/time)
#   E | pycodestyle errors (PEP8)
#  EM | errmsg (exceptions)
# ERA | eraticate (comments)
#   F | pyflakes (invalid/bad code)
#  FA | uture-annotations (type hints)
#   I | isort (import ordering)
#   N | pep8-naming (PEP8)
#  PT | pytest-style (tests)
# PTH | use-pathlib (old syntax)
# RET | return (return statements)
# RUF | ruff (other)
#   S | bandit (static security)
# SIM | simplicity (code complexity)
#  TD | todos (comments)
# TRY | tryceratops (exceptions)
#  UP | pyupgrade (old syntax)
#   W | pycodestyle warnings (PEP8)
select = ["A", "ANN", "B", "B9", "C90", "C4", "D", "DTZ", "E", "EM", "ERA", "F", "FA", "I", "N", "PT", "PTH", "RET", "RUF", "S", "SIM", "TD", "TRY", "UP", "W"]

#   D100 | for avoding module level docstrings
#   D104 | for avoding package level docstrings
#   D203 | for requring blank line before classes (which looks silly)
#   D212 | for docstring requring multi-line comments to start on first line (which looks silly)
#   D402 | for docstring that can't resemble their signatures (despite them being completely different)
#   E501 | for bug-bear compatibility (as B905 overrides line length checks)
#  PT001 | for `@pytest.fixture` parentheses (as it's unstable/unreliable)
#  PT023 | for `@pytest.mark.cov` parentheses (as it's unstable/unreliable)
#  TD002 | for TODOs without an author (as an issue should assign ownership)
ignore = ["D100", "D104", "D107", "D203", "D212", "D402", "E501", "PT001", "PT023", "TD002"]

[tool.ruff.lint.per-file-ignores]
# config.py |   D401 | ignore imperative mood in docstrings (too unreliable)
# config.py |   N802 | ignore use of upper case method names
"config.py" = ["D401", "N802"]
#   tests/* | ANN201 | ignore public functions
#   tests/* | ANN401 | ignore use of 'Any' type
#   tests/* |   D401 | ignore imperative mood in docstrings (too unreliable)
#   tests/* |   S101 | ignore use of assert
"tests/*" = ["ANN201", "ANN401", "D401", "S101"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.sqlfluff.core]
dialect = "postgres"
templater = "raw"
max_line_length = 120
exclude_rules = "ST06, ST10"  # see docs/dev for more info

[tool.pymarkdown]
plugins.md013.line_length = 120
plugins.md014.enabled = false
extensions.markdown-extended-autolinks.enabled = true

[tool.pytest_env]
ASSETS_TRACKING_SERVICE_LOG_LEVEL = "INFO"
ASSETS_TRACKING_SERVICE_ENABLE_FEATURE_SENTRY = "false"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_GEOTAB="true"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_AIRCRAFT_TRACKING="true"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_RVDAS="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_ARCGIS="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_GEOJSON="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_DATA_CATALOGUE="true"
ASSETS_TRACKING_SERVICE_DB_DATABASE = "assets_tracking_test"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_DATABASE = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_API_KEY = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_RVDAS_URL = "https://example.com/items.json"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_USERNAME="x"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_PASSWORD="x"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_BASE_ENDPOINT_PORTAL="https://example.com"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_BASE_ENDPOINT_SERVER="https://example.com/arcgis"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_OUTPUT_PATH="site"

[tool.pytest.ini_options]
# --strict-markers | fail if unknown markers are used
# --random-order   | run tests in random order
# -x               | stop after first failure [Overriden in CI]
# --ff             | run failed tests first
addopts = "--strict-markers --random-order -x --ff"
markers = [
    "cov: coverage checks (deselect with '-m \"not cov\"')",
]
filterwarnings = [
    "ignore::DeprecationWarning:mygeotab.*",
    "ignore::DeprecationWarning:.*.arcgis.*", # arcgis
    "ignore::DeprecationWarning:jupyter_client.*", # arcgis
    "ignore::DeprecationWarning:notebook.*", # arcgis
    "ignore::FutureWarning:dask.*", # arcgis
]

[tool.coverage.report]
skip_empty = true
show_missing = false
fail_under = 100
exclude_lines = [
  "pragma: no cover",
  "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.run]
branch = true
source = ["src"]
omit = []

[build-system]
requires = ["uv_build>=0.8.18,<0.9.0"]
build-backend = "uv_build"
