[tool.poetry]
name = "assets-tracking-service"
version = "0.1.0"
description = "Service to track the location of BAS assets, including ships, aircraft, and vehicles."
authors = ["Felix Fennell <felnne@bas.ac.uk>"]
readme = "README.md"
license = "MIT"
packages = [{ include = "assets_tracking_service", from = "src" }]
include = ["resources"]

[tool.poetry.scripts]
ats-ctl = 'assets_tracking_service.cli:app_cli'

[tool.poetry.dependencies]
python = "^3.12"
assets-tracking-service-aircraft-provider = { version = "^0.1.0", source = "ats-air" }
dsnparse = "^0.2.1"
environs = "^11.0.0"
psycopg = "^3.2.1"
typer = "^0.12.3"
ulid-py = "^1.1.0"
rich = "^13.7.1"

[[tool.poetry.source]]
name = "ats-air"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1216/packages/pypi/simple"
priority = "supplemental"


[tool.poetry.group.dev.dependencies]
ruff = "^0.5.1"
safety = "^3.2.4"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-env = "^1.1.3"
pytest-freezer = "^0.4.8"
pytest-mock = "^3.14.0"
pytest-postgresql = "^6.0.0"
pytest-random-order = "^1.1.1"
pytest-recording = "^0.13.2"

[tool.ruff]
src = ["src"]
line-length = 120
target-version = "py312"

[tools.ruff.lint]
select = ['A', 'ANN', 'B', 'B9', 'C90', 'C4', 'D', 'DTZ', 'E', 'EM', 'ERA', 'F', 'FA', 'I', 'N', 'PT', 'PTH', 'RET', 'RUF', 'S', 'SIM', 'TD', 'TRY', 'UP', 'W']
#   A | builtins (variables named after builtin names)
# ANN | annotations (type hints)
#   B | bug-bear (bad code)
#  B9 | bug-bear opinionated (additional bad code)
# C90 | mccabe (code complexity)
#  C4 | comprehensions (list/dict/set comprehensions)
#   D | pydocstyle (docstring)
# DTZ | datetimez (date/time)
#   E | pycodestyle errors (PEP8)
#  EM | errmsg (exceptions)
# ERA | eraticate (comments)
#   F | pyflakes (invalid/bad code)
#  FA | uture-annotations (type hints)
#   I | isort (import ordering)
#   N | pep8-naming (PEP8)
#  PT | pytest-style (tests)
# PTH | use-pathlib (old syntax)
# RET | return (return statements)
# RUF | ruff (other)
#   S | bandit (static security)
# SIM | simplicity (code complexity)
#  TD | todos (comments)
# TRY | tryceratops (exceptions)
#  UP | pyupgrade (old syntax)
#   W | pycodestyle warnings (PEP8)

ignore = ['D100', 'D104', 'D107', 'D203', 'D212', 'D402', 'E501', 'TD002']
#   D100 | for avoding module level docstrings
#   D104 | for avoding package level docstrings
#   D203 | for requring blank line before classes (which looks silly)
#   D212 | for docstring requring multi-line comments to start on first line (which looks silly)
#   D402 | for docstring that can't resemble their signatures (despite them being completely different)
#   E501 | for bug-bear compatibility (as B905 overrides line length checks)
#  TD002 | for allowing TODOs without an author (as issue should assign ownership)

[lint.extend-per-file-ignores]
"tests/*" = ["ANN201", "ANN401", "S101"]
"config.py" = ["N802"]
#   tests/* | ANN201 | ignore public functions
#   tests/* | ANN401 | ignore use of 'Any' type
#   tests/* |   S101 | ignore use of assert
# config.py |   N802 | ignore use of upper case method names

[tool.pytest_env]
ASSETS_TRACKING_SERVICE_DB_DATABASE = "assets-tracking-test"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_DATABASE = "x"

ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_API_KEY = "x"

[tool.pytest.ini_options]
addopts = "--strict-markers --random-order -x --ff"
# --strict-markers | fail if unknown markers are used
# --random-order   | run tests in random order
# -x               | stop after first failure [Overriden in CI]
# --ff             | run failed tests first
markers = [
  "cov: coverage checks (deselect with '-m \"not cov\"')"
]
filterwarnings = [
    "ignore::DeprecationWarning:mygeotab.*"
]

[tool.coverage.report]
skip_empty = true
show_missing = false
fail_under = 100
exclude_lines = ["@abstractmethod"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.run]
branch = true
source = ["src"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
