[project]
name = "assets-tracking-service"
version = "0.6.0"
description = "Service to track the location of BAS assets, including ships, aircraft, and vehicles."
readme = "README.md"
license = "MIT"
authors = [
    { name = "Felix Fennell", email = "felnne@bas.ac.uk" }
]
requires-python = ">=3.11"
dependencies = [
    "arcgis>=2.4.0",
    "assets-tracking-service-aircraft-provider>=0.3.2",
    "bas-metadata-library>=0.15.1", # via lib/data_catalogue
    "beautifulsoup4>=4.13.3", # via lib/data_catalogue
    "boto3>=1.37.30", # via lib/data_catalogue
    "boto3-stubs[s3]>=1.37.31", # via lib/data_catalogue
    "cattrs>=24.1.2", # via lib/data_catalogue
    "dsnparse>=0.2.1",
    "environs>=14.1.0",
    "geojson>=3.2.0",
    "humanize>=4.12.1", # via lib/data_catalogue
    "importlib-resources>=6.5.2",
    "jinja2>=3.1.5",
    "jsonschema>=4.23.0", # via lib/data_catalogue
    "markdown>=3.7",
    "mygeotab>=0.9.2",
    "pint>=0.24.4",
    "psycopg[binary]>=3.2.3",
    "rich>=13.9.4",
    "sentry-sdk>=2.19.2",
    "shapely>=2.0.6",
    "typer>=0.12.3",
    "ulid-py>=1.1.0",
]

[project.scripts]
ats-ctl = "assets_tracking_service.cli:app_cli"

[dependency-groups]
dev = [
    "ruff>=0.9.1",
    "safety>=3.2.14",
    "sqlfluff>=3.3.0",
]
test = [
    "moto[s3]>=5.1.3",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-env>=1.1.5",
    "pytest-freezer>=0.4.9",
    "pytest-mock>=3.14.0",
    "pytest-playwright>=0.7.0",
    "pytest-postgresql>=6.1.1",
    "pytest-random-order>=1.1.1",
    "pytest-recording>=0.13.2",
]

[[tool.uv.index]]
name = "self"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1220/packages/pypi/simple"
publish-url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1220/packages/pypi"
explicit = true

[[tool.uv.index]]
name = "ats-air"
url = "https://gitlab.data.bas.ac.uk/api/v4/projects/1291/packages/pypi/simple"
explicit = true

[tool.uv.sources]
assets-tracking-service-aircraft-provider = { index = "ats-air" }

[tool.ruff]
src = ["src"]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = ["A", "ANN", "B", "B9", "C90", "C4", "D", "DTZ", "E", "EM", "ERA", "F", "FA", "I", "N", "PT", "PTH", "RET", "RUF", "S", "SIM", "TD", "TRY", "UP", "W"]
#   A | builtins (variables named after builtin names)
# ANN | annotations (type hints)
#   B | bug-bear (bad code)
#  B9 | bug-bear opinionated (additional bad code)
# C90 | mccabe (code complexity)
#  C4 | comprehensions (list/dict/set comprehensions)
#   D | pydocstyle (docstring)
# DTZ | datetimez (date/time)
#   E | pycodestyle errors (PEP8)
#  EM | errmsg (exceptions)
# ERA | eraticate (comments)
#   F | pyflakes (invalid/bad code)
#  FA | uture-annotations (type hints)
#   I | isort (import ordering)
#   N | pep8-naming (PEP8)
#  PT | pytest-style (tests)
# PTH | use-pathlib (old syntax)
# RET | return (return statements)
# RUF | ruff (other)
#   S | bandit (static security)
# SIM | simplicity (code complexity)
#  TD | todos (comments)
# TRY | tryceratops (exceptions)
#  UP | pyupgrade (old syntax)
#   W | pycodestyle warnings (PEP8)

ignore = ["D100", "D104", "D107", "D203", "D212", "D402", "E501", "PT001", "PT023", "TD002"]
#   D100 | for avoding module level docstrings
#   D104 | for avoding package level docstrings
#   D203 | for requring blank line before classes (which looks silly)
#   D212 | for docstring requring multi-line comments to start on first line (which looks silly)
#   D402 | for docstring that can't resemble their signatures (despite them being completely different)
#   E501 | for bug-bear compatibility (as B905 overrides line length checks)
#  PT001 | for `@pytest.fixture` parentheses (as it's unstable/unreliable)
#  PT023 | for `@pytest.mark.cov` parentheses (as it's unstable/unreliable)
#  TD002 | for TODOs without an author (as an issue should assign ownership)

[tool.ruff.lint.per-file-ignores]
"config.py" = ["D401", "N802"]
# config.py |   D401 | ignore imperative mood in docstrings (too unreliable)
# config.py |   N802 | ignore use of upper case method names
"tests/*" = ["ANN201", "ANN401", "S101"]
#   tests/* | ANN201 | ignore public functions
#   tests/* | ANN401 | ignore use of 'Any' type
#   tests/* |   S101 | ignore use of assert

[tool.sqlfluff.core]
dialect = "postgres"
templater = "raw"
max_line_length = 120
exclude_rules = "ST06, ST10"  # see docs/dev for more info

[tool.pytest_env]
# `ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_SENTRY_SRC` needs to be real to load the Sentry feedback widget
ASSETS_TRACKING_SERVICE_LOG_LEVEL = "INFO"
ASSETS_TRACKING_SERVICE_ENABLE_FEATURE_SENTRY = "false"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_GEOTAB="true"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_AIRCRAFT_TRACKING="true"
ASSETS_TRACKING_SERVICE_ENABLE_PROVIDER_RVDAS="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_ARCGIS="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_GEOJSON="true"
ASSETS_TRACKING_SERVICE_ENABLE_EXPORTER_DATA_CATALOGUE="true"
ASSETS_TRACKING_SERVICE_DB_DATABASE = "assets_tracking_test"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_GEOTAB_DATABASE = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_USERNAME = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_PASSWORD = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_AIRCRAFT_TRACKING_API_KEY = "x"
ASSETS_TRACKING_SERVICE_PROVIDER_RVDAS_URL = "https://example.com/items.json"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_USERNAME="x"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_PASSWORD="x"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_BASE_ENDPOINT_PORTAL="https://example.com"
ASSETS_TRACKING_SERVICE_EXPORTER_ARCGIS_BASE_ENDPOINT_SERVER="https://example.com/arcgis"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_OUTPUT_PATH="site"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_AWS_ACCESS_ID="x"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_AWS_ACCESS_SECRET="x"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_AWS_S3_BUCKET="x"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_ITEM_CONTACT_ENDPOINT="https://example.com/contact"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_SENTRY_SRC="https://js.sentry-cdn.com/57698b6483c7ac43b7c9c905cdb79943.min.js"
ASSETS_TRACKING_SERVICE_EXPORTER_DATA_CATALOGUE_PLAUSIBLE_DOMAIN="x"

[tool.pytest.ini_options]
addopts = "--strict-markers --random-order -x --ff"
# --strict-markers | fail if unknown markers are used
# --random-order   | run tests in random order
# -x               | stop after first failure [Overriden in CI]
# --ff             | run failed tests first
markers = [
    "cov: coverage checks (deselect with '-m \"not cov\"')",
]
filterwarnings = [
    "ignore::DeprecationWarning:mygeotab.*",
    "ignore::DeprecationWarning:.*.arcgis.*", # arcgis
    "ignore::DeprecationWarning:jupyter_client.*", # arcgis
    "ignore::DeprecationWarning:notebook.*", # arcgis
    "ignore::FutureWarning:dask.*", # arcgis
]

[tool.coverage.report]
skip_empty = true
show_missing = false
fail_under = 100
exclude_lines = [
  "pragma: nocover",
  "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.run]
branch = true
source = ["src"]
omit = []

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
