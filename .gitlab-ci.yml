---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - 🧪 test
  - 📋 lint
  - 🏗 build
  - 📦 publish
  - 🚀 deploy
  - 📣 release

variables:
  # Image
  UV_CACHE_DIR: ".uv-cache"
  UV_VERSION: "0.6.5"
  PYTHON_VERSION: "3.11"

  # Postgres Service
  POSTGRES_HOST: "postgres"
  POSTGRES_DB: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "password"
  PSQL_SU_BASE: "psql -h $POSTGRES_HOST -U $POSTGRES_USER"

  # App
  APP_DB_USERNAME: "assets_tracking_owner"
  APP_DB_PASSWORD: "password"
  APP_DB_DATABASE: "assets_tracking_dev"  # intentionally different to service DB as not used for tests
  ASSETS_TRACKING_SERVICE_DB_DSN: "postgresql://$APP_DB_USERNAME:$APP_DB_PASSWORD@$POSTGRES_HOST/$APP_DB_DATABASE"

  # Linting
  RUFF_BIN: "uv run --only-group dev --frozen ruff"
  RUFF_TARGETS: "src/ tests/ scripts/"

  # Packaging
  PACKAGE_ACCESS_IDENTIFIER: "gitlab-ci"

  # Dependencies
  ATS_AIR_ACCESS_IDENTIFIER: "gitlab-ci"
  UV_INDEX_ATS_AIR_USERNAME: "$ATS_AIR_ACCESS_IDENTIFIER"
  UV_INDEX_ATS_AIR_PASSWORD: "$ATS_AIR_ACCESS_TOKEN"

  # Deployment
  DEPLOY_ANSIBLE_REPO: "gitlab.data.bas.ac.uk/station-data-management/ansible.git"
  DEPLOY_ANSIBLE_BRANCH: "master"
  DEPLOY_ANSIBLE_VENV: "/tmp/.venv/ansible"
  DEPLOY_ANSIBLE_ROOT_PATH: "/tmp/ansible"
  DEPLOY_ANSIBLE_VAULT_PATH: ".vault_magic.password"
  ANSIBLE_HOST_KEY_CHECKING: "False"
  DEPLOY_GROUP: "magic"
  DEPLOY_SSH_PRIVATE_KEY: "id_ed25519.pem"
  DEPLOY_PLAYBOOK: "assets-tracking-service.yml"

  # Secrets (set in GitLab CI/CD settings)
  # - PACKAGE_ACCESS_TOKEN
  #   - https://gitlab.data.bas.ac.uk/MAGIC/assets-tracking-service/-/settings/repository, ('Gitlab CI', 'gitlab-ci', 'read_package_registry` scope)
  # - PROJECT_ACCESS_TOKEN
  #   - https://gitlab.data.bas.ac.uk/MAGIC/assets-tracking-service/-/settings/access_tokens
  #   - (name: 'gitlab_ci' scope: 'read_api', role: 'reporter')
  # - ATS_AIR_ACCESS_TOKEN
  #   - copy the `PACKAGE_ACCESS_TOKEN` CI secret from project 1291
  # - SAFETY_API_KEY
  #   - https://start.1password.com/open/i?a=QSB6V7TUNVEOPPPWR6G7S2ARJ4&v=k34cpwfkqaxp2r56u4aklza6ni&i=swbuhnii4ego6qycyqknvtk7gi&h=magic.1password.eu
  # - OP_SERVICE_ACCOUNT_TOKEN
  #   - https://start.1password.com/open/i?a=QSB6V7TUNVEOPPPWR6G7S2ARJ4&v=k34cpwfkqaxp2r56u4aklza6ni&i=hpszegtzzarkgua2ckg57gxpxe&h=magic.1password.eu

image: mcr.microsoft.com/playwright/python:v1.52.0-noble

.before_script_python: &before_script_python
  - apt-get update

  # setup UV
  - curl -LsSfo uv.tar.gz https://github.com/astral-sh/uv/releases/download/$UV_VERSION/uv-x86_64-unknown-linux-gnu.tar.gz
  - tar -xzf uv.tar.gz
  - mv uv-x86_64-unknown-linux-gnu/uv uv-x86_64-unknown-linux-gnu/uvx /usr/local/bin
  - uv --version

.before_script_testing: &before_script_testing
  - *before_script_python

  # setup locale
  - apt-get install -y locales
  - sed -i 's/# en_GB.UTF-8 UTF-8/en_GB.UTF-8 UTF-8/' /etc/locale.gen
  - locale-gen
  - export LANG=en_GB.UTF-8
  - export LANGUAGE=en_GB:en
  - export LC_ALL=en_GB.UTF-8

  # setup app dep libs
  - apt-get install -y gcc libkrb5-dev

  # setup postgres
  - apt-get install -y postgresql-client
  - export PGPASSWORD=$POSTGRES_PASSWORD    # best practice way to provide password to psql
  - $PSQL_SU_BASE -d $POSTGRES_DB -c "SELECT 'OK' AS status;"
  - $PSQL_SU_BASE -d $POSTGRES_DB -c "CREATE USER $APP_DB_USERNAME WITH PASSWORD '$APP_DB_PASSWORD';"
  - $PSQL_SU_BASE -d $POSTGRES_DB -c "CREATE USER assets_tracking_service_ro NOLOGIN;"
  - $PSQL_SU_BASE -d $POSTGRES_DB -c "CREATE DATABASE $APP_DB_DATABASE OWNER assets_tracking_owner;"
  - $PSQL_SU_BASE -d $POSTGRES_DB -c "CREATE DATABASE assets_tracking_test OWNER assets_tracking_owner;"
  - $PSQL_SU_BASE -d $APP_DB_DATABASE -c "CREATE EXTENSION IF NOT EXISTS postgis;"
  - $PSQL_SU_BASE -d $APP_DB_DATABASE -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
  - $PSQL_SU_BASE -d $APP_DB_DATABASE -c "CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;"
  - $PSQL_SU_BASE -d assets_tracking_test -c "CREATE EXTENSION IF NOT EXISTS postgis;"
  - $PSQL_SU_BASE -d assets_tracking_test -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
  - $PSQL_SU_BASE -d assets_tracking_test -c "CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;"
  - uv run python -c 'from assets_tracking_service.config import Config; c = Config(); print(c.DB_DSN_SAFE)'

  # setup app deps
  - uv sync --all-groups --python $PYTHON_VERSION

.before_script_deploy: &before_script_deploy
  - apt-get update

  # setup 1Password CLI
  - apt-get install -y curl unzip
  - curl -sSfo op.zip https://cache.agilebits.com/dist/1P/op2/pkg/v2.28.0/op_linux_amd64_v2.28.0.zip
  - unzip -od /usr/local/bin/ op.zip

  # clone IT Ansible
  - apt-get install -y git
  - git clone --branch $DEPLOY_ANSIBLE_BRANCH https://gitlab-ci-token:$CI_JOB_TOKEN@$DEPLOY_ANSIBLE_REPO $DEPLOY_ANSIBLE_ROOT_PATH

  # setup Ansible
  - apt-get install -y ssh build-essential
  - python -m venv $DEPLOY_ANSIBLE_VENV
  - $DEPLOY_ANSIBLE_VENV/bin/python -m pip install --upgrade pip
  - $DEPLOY_ANSIBLE_VENV/bin/python -m pip install -r $DEPLOY_ANSIBLE_ROOT_PATH/requirements.txt
  - export PATH=$DEPLOY_ANSIBLE_VENV/bin:$PATH

  # setup Ansible vault
  - op read --out-file ~/$DEPLOY_ANSIBLE_VAULT_PATH "op://Infrastructure/Ansible Vault - BAS IT Ansible MAGIC/password"

  # setup SSH
  - apt-get install -y openssh-client
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - op read --out-file ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY "op://Infrastructure/Assets Tracking Service - GitLab CI private key/private key?ssh-format=openssh"
  - eval $(ssh-agent -s)
  - chmod 400 ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY
  - ssh-add ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY

# Jobs

pytest:
  stage: 🧪 test
  needs: []
  services:
    - name: postgis/postgis:16-3.4-alpine
      alias: postgres
  before_script:
    - *before_script_testing
  script:
    - uv run pytest -o junit_family=xunit2 --junitxml=test-results.xml --cov --cov-report=html --continue-on-collection-errors
    # --continue-on-collection-errors counteracts `-x` flag set in pyproject.toml
  coverage: '/Total coverage: \d+\.\d+/'
  artifacts:
    when: always
    reports:
      junit: test-results.xml
    paths:
      - htmlcov
    expire_in: 1 month
  rules:
    -
      changes:
        - 'src/assets_tracking_service/*.py'
        - 'src/assets_tracking_service/resources/db_migrations/**/*.sql'
        - 'tests/**/*.py'
        - 'pyproject.toml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

ruff:
  stage: 📋 lint
  needs: []
  before_script:
    - *before_script_python
  script:
    - $RUFF_BIN check $RUFF_TARGETS
    - $RUFF_BIN format --check $RUFF_TARGETS
  rules:
    -
      changes:
        - '**/*.py'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

sqlfluff:
  stage: 📋 lint
  needs: []
  before_script:
    - *before_script_python
  script:
    - uv run --only-group dev --frozen sqlfluff lint src/assets_tracking_service/resources/db_migrations
  rules:
    -
      changes:
        - 'src/assets_tracking_service/resources/db_migrations/**/*.sql'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

safety:
  stage: 📋 lint
  needs: []
  before_script:
    - *before_script_python
  script:
    - uv run --only-group dev --frozen safety --stage cicd scan --detailed-output
  rules:
    -
      changes:
        - '.safety-policy.yml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" && $CI_COMMIT_TAG == null'

build:
  stage: 🏗 build
  needs: []
  before_script:
    - *before_script_python
  script:
    - uv build
  artifacts:
    paths:
      - dist/
    expire_in: 1 month
  rules:
    -
      changes:
        - '**/*.py'
        - 'pyproject.toml'
        - 'uv.lock'
      if: '$CI_COMMIT_BRANCH != "main" || $CI_COMMIT_TAG != null'

publish:
  stage: 📦 publish
  needs:
    - job: build
      artifacts: true
  before_script:
    - *before_script_python
  script:
    - uv publish --index=self --username=gitlab-ci-token --password=$CI_JOB_TOKEN
  retry:
    max: 2
  rules:
    - if: '$CI_COMMIT_TAG != null'

prerelease:
  stage: 📦 publish
  needs: []
  before_script:
    - *before_script_python
    - apt-get update && apt-get install -y git gcc libkrb5-dev
    - scripts/create-release.py prerelease
    - echo "DEPLOY_APP_VERSION=$(scripts/read-pyproject-version.py)" >> build.env
  script:
    - uv build
    - uv publish --index=self --username=gitlab-ci-token --password=$CI_JOB_TOKEN
  retry:
    max: 2
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'

deploy_prod:
  stage: 🚀 deploy
  needs:
    - job: publish
  image: python:3.6-slim
  variables:
    DEPLOY_ENV: "production"
  before_script:
    - *before_script_deploy
    - export DEPLOY_APP_VERSION=$(echo $CI_COMMIT_TAG | cut -c 2-)  # remove 'v' prefix
  script:
    - cd $DEPLOY_ANSIBLE_ROOT_PATH
    - ansible workstations -m ping -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV
    - ansible-playbook -v -b -e env=$DEPLOY_ENV -e group=$DEPLOY_GROUP -e project=$DEPLOY_ANSIBLE_ROOT_PATH -e app_version=$DEPLOY_APP_VERSION --vault-id ~/$DEPLOY_ANSIBLE_VAULT_PATH -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV playbooks/$DEPLOY_GROUP/$DEPLOY_PLAYBOOK
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_TAG

deploy_stage:
  stage: 🚀 deploy
  needs:
    - job: prerelease
      artifacts: true
  image: python:3.6-slim
  variables:
    DEPLOY_ENV: "staging"
  before_script:
    - *before_script_deploy
  script:
    - cd $DEPLOY_ANSIBLE_ROOT_PATH
    - ansible workstations -m ping -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV
    - ansible-playbook -v -b -e env=$DEPLOY_ENV -e group=$DEPLOY_GROUP -e project=$DEPLOY_ANSIBLE_ROOT_PATH -e app_version=$DEPLOY_APP_VERSION --vault-id ~/$DEPLOY_ANSIBLE_VAULT_PATH -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV playbooks/$DEPLOY_GROUP/$DEPLOY_PLAYBOOK
  environment:
    name: staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'
  when: manual

release:
  stage: 📣 release
  needs:
    - job: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --no-cache curl jq

    - export TAG_NO_PREFIX=$(echo $CI_COMMIT_TAG | cut -c 2-)
    # for a string v0.8.13, replace last digit to always be 0
    - export TAG_NO_PATCH=$(echo $CI_COMMIT_TAG | sed 's/[0-9]$/0/')

    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages" > data.json'
    - export PACKAGE_ID=$(cat data.json | jq -r ".[] | select(.version==\"$TAG_NO_PREFIX\") | .id") && rm data.json

    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$CI_COMMIT_TAG" > milestone_exact.json'
    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$TAG_NO_PATCH" > milestone-minor.json'
    - export MILESTONE_TITLE_EXACT=$(cat milestone_exact.json | jq -r ".[0] | .title") && rm milestone_exact.json
    - export MILESTONE_TITLE_MINOR=$(cat milestone-minor.json | jq -r ".[0] | .title") && rm milestone-minor.json
    - >
      if [ "$MILESTONE_TITLE_EXACT" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_EXACT
      elif [ "$MILESTONE_TITLE_MINOR" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_MINOR
      else
          export MILESTONE_TITLE=""
      fi

    - curl -s -L -O https://github.com/taiki-e/parse-changelog/releases/download/v0.6.8/parse-changelog-x86_64-unknown-linux-musl.tar.gz
    - tar -xzf parse-changelog-x86_64-unknown-linux-musl.tar.gz -C /usr/local/bin/
    - parse-changelog CHANGELOG.md "$TAG_NO_PREFIX" > changelog.txt

    # the release section cannot access variables defined in a script but can read from a file :|
    - echo "$TAG_NO_PREFIX" > tag_no_prefix.txt
    - echo "$PACKAGE_ID" > package_id.txt
    - echo "$MILESTONE_TITLE" > milestone_title.txt
  script:
    - echo 'releasing'
  release:
    name: $(cat tag_no_prefix.txt)
    tag_name: $CI_COMMIT_TAG
    milestones:
      - $(cat milestone_title.txt)
    description: $(cat changelog.txt)
    assets:
      links:
        - name: README
          url: '$CI_PROJECT_URL/-/blob/$CI_COMMIT_TAG/README.md'
          link_type: runbook
        - name: Python Package
          url: '$CI_PROJECT_URL/-/packages/$(cat package_id.txt)'
          link_type: package
  rules:
    - if: $CI_COMMIT_TAG
